// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyDB;

namespace PropertyDB.Migrations
{
    [DbContext(typeof(PropertyDBContext))]
    [Migration("20200731145408_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PropertyDB.Admin.CssAddress", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("Varchar(200)");

                    b.Property<int?>("CityCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CityCode");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("Varchar(100)");

                    b.Property<int?>("StateCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("StateCode");

                    b.ToTable("City");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCountry", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Continent")
                        .HasColumnType("Varchar(50)");

                    b.Property<string>("Country")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("CountryAbr")
                        .HasColumnType("Varchar(3)");

                    b.Property<string>("Region")
                        .HasColumnType("Varchar(75)");

                    b.HasKey("Code");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssEmail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("Varchar(150)");

                    b.HasKey("Code");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssGeneral", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DependsOn")
                        .HasColumnType("Varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("End")
                        .HasColumnType("Varchar(20)");

                    b.Property<int?>("KindCode")
                        .HasColumnType("int");

                    b.Property<string>("Start")
                        .HasColumnType("Varchar(20)");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Code");

                    b.HasIndex("KindCode");

                    b.ToTable("General");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssKind", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Kind");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssPhone", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("Varchar(16)");

                    b.Property<string>("PhoneType")
                        .HasColumnType("Varchar(15)");

                    b.Property<string>("Provider")
                        .HasColumnType("Varchar(50)");

                    b.HasKey("Code");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssRole", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("KindCode")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("KindCode");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssState", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("CountryCode");

                    b.ToTable("State");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssUser", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleCode")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("RoleCode");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PropertyDB.Building.CssAmenities", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CssUnitCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("KindAmenitiesCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CssUnitCode");

                    b.HasIndex("KindAmenitiesCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("PropertyDB.Building.CssBuilding", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<string>("BuldingName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("BuldingTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Elvator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<string>("LotSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SquareFoot")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AddressCode");

                    b.HasIndex("BuldingTypeCode");

                    b.HasIndex("PhoneCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("PropertyDB.Building.CssPicture", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("CssBuildingCode")
                        .HasColumnType("int");

                    b.Property<string>("CssItemCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CssBuildingCode");

                    b.HasIndex("CssItemCode");

                    b.ToTable("BuildPic");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnit", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CssBuildingCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("LotSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("RentalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SquareFoot")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CssBuildingCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnitHas", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CssUnitCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CssUnitCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("UnitHas");
                });

            modelBuilder.Entity("PropertyDB.CssPerson", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<int?>("EmailCode")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<string>("PicCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("SocialNetworkCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AddressCode");

                    b.HasIndex("EmailCode");

                    b.HasIndex("PhoneCode");

                    b.HasIndex("PicCode");

                    b.HasIndex("SocialNetworkCode");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssItem", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Belong")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BrandName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CssUnitHasCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemCost")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaxCant")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MinCant")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReOrderPoint")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("StoreUnitCode")
                        .HasColumnType("int");

                    b.Property<bool>("Tax")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UPC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CssUnitHasCode");

                    b.HasIndex("StatusCode");

                    b.HasIndex("StoreUnitCode");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssAddress", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssCity", "City")
                        .WithMany()
                        .HasForeignKey("CityCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCity", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssState", "State")
                        .WithMany()
                        .HasForeignKey("StateCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssGeneral", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssRole", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "Kind")
                        .WithMany()
                        .HasForeignKey("KindCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssState", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssUser", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssAmenities", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnit", null)
                        .WithMany("Amenities")
                        .HasForeignKey("CssUnitCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "KindAmenities")
                        .WithMany()
                        .HasForeignKey("KindAmenitiesCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssBuilding", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "BuldingType")
                        .WithMany()
                        .HasForeignKey("BuldingTypeCode");

                    b.HasOne("PropertyDB.Admin.CssPhone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssPicture", b =>
                {
                    b.HasOne("PropertyDB.Building.CssBuilding", null)
                        .WithMany("Pics")
                        .HasForeignKey("CssBuildingCode");

                    b.HasOne("PropertyDB.Inventory.CssItem", null)
                        .WithMany("Pics")
                        .HasForeignKey("CssItemCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnit", b =>
                {
                    b.HasOne("PropertyDB.Building.CssBuilding", null)
                        .WithMany("Units")
                        .HasForeignKey("CssBuildingCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnitHas", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnit", null)
                        .WithMany("UnitHas")
                        .HasForeignKey("CssUnitCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.CssPerson", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("PropertyDB.Admin.CssEmail", "Email")
                        .WithMany()
                        .HasForeignKey("EmailCode");

                    b.HasOne("PropertyDB.Admin.CssPhone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneCode");

                    b.HasOne("PropertyDB.Building.CssPicture", "Pic")
                        .WithMany()
                        .HasForeignKey("PicCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "SocialNetwork")
                        .WithMany()
                        .HasForeignKey("SocialNetworkCode");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssItem", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnitHas", null)
                        .WithMany("UnitHas")
                        .HasForeignKey("CssUnitHasCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "StoreUnit")
                        .WithMany()
                        .HasForeignKey("StoreUnitCode");
                });
#pragma warning restore 612, 618
        }
    }
}
