// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyDB;

namespace PropertyDB.Migrations
{
    [DbContext(typeof(PropertyDBContext))]
    [Migration("20200809162801_UnitSectionAndUnitInOut")]
    partial class UnitSectionAndUnitInOut
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PropertyDB.Accounting.CssCatalog", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ABALANCE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ANALITICO")
                        .HasColumnType("int");

                    b.Property<decimal>("BALANCE")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CREDITO")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("CRMENSUAL")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("CTACONTROL")
                        .HasColumnType("int");

                    b.Property<string>("CUENTA")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CUENTATIPO")
                        .HasColumnType("int");

                    b.Property<decimal>("DEBITO")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DESCRIPCION")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("DRMENSUAL")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("FECHA")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RESULTADO")
                        .HasColumnType("int");

                    b.Property<int>("SITUACION")
                        .HasColumnType("int");

                    b.Property<string>("SUPERCUENTA")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssAddress", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("Varchar(200)");

                    b.Property<int?>("CityCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CityCode");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("Varchar(100)");

                    b.Property<int?>("StateCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("StateCode");

                    b.ToTable("City");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCompany", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<string>("CFNNumer")
                        .HasColumnType("varchar(75)");

                    b.Property<string>("CFNSecuencia")
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Company")
                        .HasColumnType("varchar(75)");

                    b.Property<string>("Contact")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateLastPay")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DatePay")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LegalRegiter")
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Logo")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("AddressCode");

                    b.HasIndex("PhoneCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCountry", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Continent")
                        .HasColumnType("Varchar(50)");

                    b.Property<string>("Country")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("CountryAbr")
                        .HasColumnType("Varchar(3)");

                    b.Property<string>("Region")
                        .HasColumnType("Varchar(75)");

                    b.HasKey("Code");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssEmail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("Varchar(150)");

                    b.HasKey("Code");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssGeneral", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DependsOn")
                        .HasColumnType("Varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("End")
                        .HasColumnType("Varchar(20)");

                    b.Property<int?>("KindCode")
                        .HasColumnType("int");

                    b.Property<string>("Start")
                        .HasColumnType("Varchar(20)");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Code");

                    b.HasIndex("KindCode");

                    b.ToTable("General");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssKind", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Kind");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssOfferContext", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Desctription")
                        .HasColumnType("Varchar(75)");

                    b.Property<int?>("PageToGoCode")
                        .HasColumnType("int");

                    b.Property<string>("PathLogo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PathPic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("PageToGoCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("OfferContext");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssPhone", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("Varchar(16)");

                    b.Property<string>("PhoneType")
                        .HasColumnType("Varchar(15)");

                    b.Property<string>("Provider")
                        .HasColumnType("Varchar(50)");

                    b.HasKey("Code");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssReponsability", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateResponsability")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DealAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("FrequencyCode")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ResponsabilityKindCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("FrequencyCode");

                    b.HasIndex("ResponsabilityKindCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Reponsability");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssRole", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("KindCode")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("KindCode");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssState", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("Varchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("CountryCode");

                    b.ToTable("State");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssUser", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("RoleCode")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("RoleCode");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PropertyDB.Building.CssAmenities", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CssUnitCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("KindAmenitiesCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CssUnitCode");

                    b.HasIndex("KindAmenitiesCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("PropertyDB.Building.CssBuilding", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<string>("BuldingName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("BuldingTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Elvator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<string>("LotSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SquareFoot")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AddressCode");

                    b.HasIndex("BuldingTypeCode");

                    b.HasIndex("PhoneCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("PropertyDB.Building.CssPicture", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("CssBuildingCode")
                        .HasColumnType("int");

                    b.Property<int?>("CssItemCode")
                        .HasColumnType("int");

                    b.Property<int?>("CssTicketCode")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CssBuildingCode");

                    b.HasIndex("CssItemCode");

                    b.HasIndex("CssTicketCode");

                    b.ToTable("BuildPic");
                });

            modelBuilder.Entity("PropertyDB.Building.CssSection", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BuildingCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("EmployeeCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("BuildingCode");

                    b.HasIndex("EmployeeCode");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("PropertyDB.Building.CssTicket", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AsignedToCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Assigned")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<int?>("PriorityCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Requested")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("Varchar(255)");

                    b.Property<DateTime>("Resolved")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("UnitNumberCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AsignedToCode");

                    b.HasIndex("PriorityCode");

                    b.HasIndex("StatusCode");

                    b.HasIndex("UnitNumberCode");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnit", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CssBuildingCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("LotSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("RentalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SquareFoot")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CssBuildingCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnitHas", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CssUnitCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CssUnitCode");

                    b.HasIndex("StatusCode");

                    b.ToTable("UnitHas");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnitInOut", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PeriodTime")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UnitCodeCode")
                        .HasColumnType("int");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("UnitCodeCode");

                    b.HasIndex("UserCode");

                    b.ToTable("UnitInOut");
                });

            modelBuilder.Entity("PropertyDB.CssPerson", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<int?>("EmailCode")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("int");

                    b.Property<string>("PicCode")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int?>("SocialNetworkCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AddressCode");

                    b.HasIndex("EmailCode");

                    b.HasIndex("PhoneCode");

                    b.HasIndex("PicCode");

                    b.HasIndex("SocialNetworkCode");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("PropertyDB.CssSalary", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.ToTable("Salary");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssItem", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Belong")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BrandName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CssUnitHasCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ItemCost")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MaxCant")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MinCant")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReOrderPoint")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("StoreUnitCode")
                        .HasColumnType("int");

                    b.Property<bool>("Tax")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UPC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CssUnitHasCode");

                    b.HasIndex("StatusCode");

                    b.HasIndex("StoreUnitCode");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssPurchaseOrder", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CompanyCodigo")
                        .HasColumnType("int");

                    b.Property<int?>("ConditionCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmployeeIDCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Flete")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("IdTransportista")
                        .HasColumnType("int");

                    b.Property<decimal>("Itbis")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PODate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PODescuent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("POTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("PayKindCode")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierCode")
                        .HasColumnType("int");

                    b.Property<string>("TaxReceipt")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Code");

                    b.HasIndex("CompanyCodigo");

                    b.HasIndex("ConditionCode");

                    b.HasIndex("EmployeeIDCode");

                    b.HasIndex("PayKindCode");

                    b.HasIndex("SupplierCode");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssPurchaseOrderDetail", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CompanyCodigo")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Descuent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("LoteId")
                        .HasColumnType("Varchar(30)");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ProductIDCode")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("StretchCode")
                        .HasColumnType("int");

                    b.Property<decimal>("UndFactor")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ZoneCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CompanyCodigo");

                    b.HasIndex("ProductIDCode");

                    b.HasIndex("PurchaseOrderCode");

                    b.HasIndex("StretchCode");

                    b.HasIndex("ZoneCode");

                    b.ToTable("PurchaseOrderDetail");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssSupplier", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryCode")
                        .HasColumnType("int");

                    b.Property<string>("EmailContact")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("LineCredit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("NameContact")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneContact")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("SupplierCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CategoryCode");

                    b.HasIndex("SupplierCode");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("PropertyDB.Payroll.CssBenefit", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("BeneficioCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("DesdeFecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EstatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("HastaFecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observacion")
                        .HasColumnType("Varchar(255)");

                    b.HasKey("Code");

                    b.HasIndex("BeneficioCode");

                    b.HasIndex("EstatusCode");

                    b.ToTable("Benefit");
                });

            modelBuilder.Entity("PropertyDB.Payroll.CssCompensation", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<decimal>("CompensationAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("CompensationKindCode")
                        .HasColumnType("int");

                    b.Property<decimal>("DatePay")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("EstatusCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("CompensationKindCode");

                    b.HasIndex("EstatusCode");

                    b.ToTable("Compensation");
                });

            modelBuilder.Entity("PropertyDB.People.CssAsignedTo", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AsignedCode")
                        .HasColumnType("int");

                    b.Property<int?>("AsignedKindCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("AsignedCode");

                    b.HasIndex("AsignedKindCode");

                    b.ToTable("AsignedTo");
                });

            modelBuilder.Entity("PropertyDB.People.CssEmployee", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PayrollKindCode")
                        .HasColumnType("int");

                    b.Property<string>("Pic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PositionCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("SalaryHistoryCode")
                        .HasColumnType("int");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("UserCode")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("PayrollKindCode");

                    b.HasIndex("PositionCode");

                    b.HasIndex("SalaryHistoryCode");

                    b.HasIndex("StatusCode");

                    b.HasIndex("UserCode");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssAddress", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssCity", "City")
                        .WithMany()
                        .HasForeignKey("CityCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCity", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssState", "State")
                        .WithMany()
                        .HasForeignKey("StateCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssCompany", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("PropertyDB.Admin.CssPhone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssGeneral", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssOfferContext", b =>
                {
                    b.HasOne("PropertyDB.Inventory.CssItem", "PageToGo")
                        .WithMany()
                        .HasForeignKey("PageToGoCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssReponsability", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "ResponsabilityKind")
                        .WithMany()
                        .HasForeignKey("ResponsabilityKindCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssRole", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "Kind")
                        .WithMany()
                        .HasForeignKey("KindCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssState", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("PropertyDB.Admin.CssUser", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssAmenities", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnit", null)
                        .WithMany("Amenities")
                        .HasForeignKey("CssUnitCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyDB.Admin.CssGeneral", "KindAmenities")
                        .WithMany()
                        .HasForeignKey("KindAmenitiesCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssBuilding", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "BuldingType")
                        .WithMany()
                        .HasForeignKey("BuldingTypeCode");

                    b.HasOne("PropertyDB.Admin.CssPhone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssPicture", b =>
                {
                    b.HasOne("PropertyDB.Building.CssBuilding", null)
                        .WithMany("Pics")
                        .HasForeignKey("CssBuildingCode");

                    b.HasOne("PropertyDB.Inventory.CssItem", null)
                        .WithMany("Pics")
                        .HasForeignKey("CssItemCode");

                    b.HasOne("PropertyDB.Building.CssTicket", null)
                        .WithMany("Pics")
                        .HasForeignKey("CssTicketCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssSection", b =>
                {
                    b.HasOne("PropertyDB.Building.CssBuilding", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingCode");

                    b.HasOne("PropertyDB.People.CssEmployee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssTicket", b =>
                {
                    b.HasOne("PropertyDB.People.CssAsignedTo", "AsignedTo")
                        .WithMany()
                        .HasForeignKey("AsignedToCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.HasOne("PropertyDB.Building.CssUnit", "UnitNumber")
                        .WithMany()
                        .HasForeignKey("UnitNumberCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnit", b =>
                {
                    b.HasOne("PropertyDB.Building.CssBuilding", "Building")
                        .WithMany("Units")
                        .HasForeignKey("CssBuildingCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnitHas", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnit", null)
                        .WithMany("UnitHas")
                        .HasForeignKey("CssUnitCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");
                });

            modelBuilder.Entity("PropertyDB.Building.CssUnitInOut", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnit", "UnitCode")
                        .WithMany()
                        .HasForeignKey("UnitCodeCode");

                    b.HasOne("PropertyDB.Admin.CssUser", "User")
                        .WithMany()
                        .HasForeignKey("UserCode");
                });

            modelBuilder.Entity("PropertyDB.CssPerson", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("PropertyDB.Admin.CssEmail", "Email")
                        .WithMany()
                        .HasForeignKey("EmailCode");

                    b.HasOne("PropertyDB.Admin.CssPhone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneCode");

                    b.HasOne("PropertyDB.Building.CssPicture", "Pic")
                        .WithMany()
                        .HasForeignKey("PicCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "SocialNetwork")
                        .WithMany()
                        .HasForeignKey("SocialNetworkCode");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssItem", b =>
                {
                    b.HasOne("PropertyDB.Building.CssUnitHas", null)
                        .WithMany("UnitHas")
                        .HasForeignKey("CssUnitHasCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "StoreUnit")
                        .WithMany()
                        .HasForeignKey("StoreUnitCode");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssPurchaseOrder", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCodigo");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionCode");

                    b.HasOne("PropertyDB.People.CssEmployee", "EmployeeID")
                        .WithMany()
                        .HasForeignKey("EmployeeIDCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "PayKind")
                        .WithMany()
                        .HasForeignKey("PayKindCode");

                    b.HasOne("PropertyDB.Inventory.CssSupplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierCode");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssPurchaseOrderDetail", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCodigo");

                    b.HasOne("PropertyDB.Inventory.CssItem", "ProductID")
                        .WithMany()
                        .HasForeignKey("ProductIDCode");

                    b.HasOne("PropertyDB.Inventory.CssPurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Stretch")
                        .WithMany()
                        .HasForeignKey("StretchCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneCode");
                });

            modelBuilder.Entity("PropertyDB.Inventory.CssSupplier", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCode");

                    b.HasOne("PropertyDB.CssPerson", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierCode");
                });

            modelBuilder.Entity("PropertyDB.Payroll.CssBenefit", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "Beneficio")
                        .WithMany()
                        .HasForeignKey("BeneficioCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusCode");
                });

            modelBuilder.Entity("PropertyDB.Payroll.CssCompensation", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "CompensationKind")
                        .WithMany()
                        .HasForeignKey("CompensationKindCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Estatus")
                        .WithMany()
                        .HasForeignKey("EstatusCode");
                });

            modelBuilder.Entity("PropertyDB.People.CssAsignedTo", b =>
                {
                    b.HasOne("PropertyDB.CssPerson", "Asigned")
                        .WithMany()
                        .HasForeignKey("AsignedCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "AsignedKind")
                        .WithMany()
                        .HasForeignKey("AsignedKindCode");
                });

            modelBuilder.Entity("PropertyDB.People.CssEmployee", b =>
                {
                    b.HasOne("PropertyDB.Admin.CssGeneral", "PayrollKind")
                        .WithMany()
                        .HasForeignKey("PayrollKindCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Position")
                        .WithMany()
                        .HasForeignKey("PositionCode");

                    b.HasOne("PropertyDB.CssSalary", "SalaryHistory")
                        .WithMany()
                        .HasForeignKey("SalaryHistoryCode");

                    b.HasOne("PropertyDB.Admin.CssGeneral", "Status")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.HasOne("PropertyDB.Admin.CssUser", "User")
                        .WithMany()
                        .HasForeignKey("UserCode");
                });
#pragma warning restore 612, 618
        }
    }
}
